// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSCube
#pragma kernel CSSphere
#pragma kernel CSPyramid
#pragma kernel CSCapsule

#include "ixMath.Noise.cginc"


struct BoidProps {
    float4x4 mat;
    float4 color;
};

struct Boid {
    float3 pos;
    float3 scale;
    float3 velocity;
    float3 acceleration;
    float4 color;
    float mass;
    float friction;
};

struct ShapeProps {
    float mass;
    float3 center;
    int active;
};

RWStructuredBuffer<ShapeProps> _ShapeProps;
RWStructuredBuffer<BoidProps> _Properties;
RWStructuredBuffer<Boid> _Boids;

float3 center;
float speed;
float size;
int maxShapeCount;
float centerMass;
float gravityFactor;
float attractionFactor;


float globalFriction = 0;

float4 _Time;

float timeSinceUpdate;


/****************   SDFs  *****************/
float SquaredLength(float3 v)
{
    return dot(v, v);
}

float CalcDistanceSphere(float3 center, float3 pos) {
  
    pos = pos - center;
    return SquaredLength(pos) - size;
}

float CalcDistanceCube(float3 center, float3 pos) {

    float3 b = float3(size, size, size);
    pos = (pos - center);

    float3 q = abs(pos) - b;
    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);
}

float CalcDistanceCapsule(float3 center, float3 pos) {

    float3 p = (pos - center);
    float3 a = float3(0, -size/2.0, 0);
    float3 b = float3(0, size / 2.0, 0);

    float r = 1;


    float3 pa = p - a, ba = b - a;
    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);
    return length(pa - ba * h) - r;
}


float CalcDistancePyramid(float3 center, float3 pos) {

    float h = size*2;

    float3 p = (pos - center);
    float m2 = h * h + 0.25;

    p.xz = abs(p.xz);
    p.xz = (p.z > p.x) ? p.zx : p.xz;
    p.xz -= 0.5;

    float3 q = float3(p.z, h * p.y - 0.5 * p.x, h * p.x + 0.5 * p.y);

    float s = max(-q.x, 0.0);
    float t = clamp((q.y - 0.5 * p.z) / (m2 + 0.25), 0.0, 1.0);

    float a = m2 * (q.x + s) * (q.x + s) + q.y * q.y;
    float b = m2 * (q.x + 0.5 * t) * (q.x + 0.5 * t) + (q.y - m2 * t) * (q.y - m2 * t);

    float d2 = min(q.y, -q.x * m2 - q.y * 0.5) > 0.0 ? 0.0 : min(a, b);

    return sqrt((d2 + q.z * q.z) / m2) * sign(max(q.z, -p.y));
}

 
/****************   Helper  *****************/

float3 limit(float3 v, float _limit) {


    v.x = clamp(v.x, -_limit, _limit);
    v.y = clamp(v.y, -_limit, _limit);
    v.z = clamp(v.z, -_limit, _limit);

    //v = v / length(v);
    //v = v * _limit;

    return v;
}

float4x4 GetTransformationMatrix(float3 pos, float3 scale) {
    return float4x4(
        scale.x, 0, 0, pos.x,
        0, scale.y, 0, pos.y,
        0, 0, scale.z, pos.z,
        0, 0, 0, 1
        );
}

float CalcMass(float3 pos, float mass) {
    return mass + noise3D(pos);
}

float CalcAlpha(float dist, float size) {
    dist += size + 0.0001;

    float alpha = size / dist + 0.5;
    alpha = clamp(alpha, 0.3, 1.5);

    return alpha;
}

float3 CalcColor(float3 pos, float3 color, float timeSinceUpdate) {
     color.x += noise3D(pos) * 0.1;
     color.y = clamp(color.y - timeSinceUpdate * 0.1, 0.3, 1);

     return color;
}

float3 hsv2rgb(float3 c)
{
    float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    float3 p = abs(frac(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * lerp(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

/****************   Forces  *****************/

float3 GetGravityForce(float3 pos, float mass1, float mass2, float dist) {
    return ((center - pos) * dist);    
}       

float3 GetSteeringForce(float3 pos , float mass, float steeringFactor) {
    pos.x = pos.x * cos(_Time.y) - pos.y * sin(_Time.y);
    pos.y = pos.y * sin(_Time.y) + pos.y * cos(_Time.y);


    return float3(noise3D(pos), noise3D(float3(pos.xzy)), noise3D(float3(pos.zxy))) * steeringFactor;
}


float3 applyForces(float3 pos, float mass1, float mass2, float dist, float frictionCoefficient) {
    float3 acceleration = float3(0, 0, 0);
    
    //gravity
    acceleration += GetGravityForce(pos, mass1, mass2, dist) * gravityFactor;

    //random steering => perlin noise
    acceleration += GetSteeringForce(pos, mass1, frictionCoefficient);


    return acceleration;
}

/****************   Kernels  *****************/


[numthreads(128, 1, 1)]
void CSCube(uint3 id : SV_DispatchThreadID)
{
    float3 scale = _Boids[id.x].scale;
    float3 pos = _Boids[id.x].pos;
    float3 vel = _Boids[id.x].velocity;
    float3 acc = _Boids[id.x].acceleration;
    float mass = _Boids[id.x].mass;
    float friction = _Boids[id.x].friction;

    float3 nextPos = pos + vel;
    float dist = CalcDistanceCube(center, nextPos);

    vel += applyForces(nextPos, mass, centerMass, dist, friction);
    vel = limit(vel, 0.3);

    pos += vel * speed;
    mass = CalcMass(pos,mass);

    vel -= vel * globalFriction;

    _Boids[id.x].pos = pos;
    _Boids[id.x].velocity = vel;
    _Boids[id.x].mass = mass;

    float alpha = CalcAlpha(dist, size);

    _Properties[id.x].color = float4(hsv2rgb(CalcColor(pos, _Boids[id.x].color.rgb, timeSinceUpdate)), alpha);
    _Properties[id.x].mat = GetTransformationMatrix(pos, scale);
}

[numthreads(256, 1, 1)]
void CSSphere(uint3 id : SV_DispatchThreadID)
{

    float3 scale = _Boids[id.x].scale;
    float3 pos = _Boids[id.x].pos;
    float3 vel = _Boids[id.x].velocity;
    float mass = _Boids[id.x].mass;
    float friction = _Boids[id.x].friction;

    float eps = 0.01;

    float3 nextPos = pos + vel;
    float dist = CalcDistanceSphere(center, nextPos);
    float3 acceleration = applyForces(nextPos, mass, centerMass, dist, friction);
 
    vel += acceleration; 
    vel = limit(vel, 0.3);

    pos += vel * speed;
    mass = CalcMass(pos, mass);

    _Boids[id.x].pos = pos;
    _Boids[id.x].velocity = vel;
    _Boids[id.x].mass = mass;    
    
    float alpha = CalcAlpha(dist, size);

    _Properties[id.x].color = float4(hsv2rgb(CalcColor(pos, _Boids[id.x].color.rgb, timeSinceUpdate)), alpha);
    _Properties[id.x].mat = GetTransformationMatrix(pos, scale);

}
[numthreads(128, 1, 1)]
void CSCapsule(uint3 id : SV_DispatchThreadID)
{

    float3 scale = _Boids[id.x].scale;
    float3 pos = _Boids[id.x].pos;
    float3 vel = _Boids[id.x].velocity;
    float3 acc = _Boids[id.x].acceleration;
    float mass = _Boids[id.x].mass;
    float friction = _Boids[id.x].friction;

    float3 nextPos = pos + vel;
    float dist = CalcDistanceCapsule(center, nextPos);

    vel += applyForces(nextPos, mass, centerMass, dist, friction);
    vel = limit(vel, 0.3);

    pos += vel * speed;
    mass = CalcMass(pos, mass);

    vel -= vel * globalFriction;


    _Boids[id.x].pos = pos;
    _Boids[id.x].velocity = vel;
    _Boids[id.x].mass = mass;

    float alpha = CalcAlpha(dist, size);

    _Properties[id.x].color = float4(hsv2rgb(CalcColor(pos, _Boids[id.x].color.rgb, timeSinceUpdate)), alpha);
    _Properties[id.x].mat = GetTransformationMatrix(pos, scale);
}

[numthreads(128, 1, 1)]
void CSPyramid(uint3 id : SV_DispatchThreadID)
{

    float3 scale = _Boids[id.x].scale;
    float3 pos = _Boids[id.x].pos;
    float3 vel = _Boids[id.x].velocity;
    float3 acc = _Boids[id.x].acceleration;
    float mass = _Boids[id.x].mass;
    float friction = _Boids[id.x].friction;

    float3 nextPos = pos + vel;
    float dist = CalcDistancePyramid(center, nextPos);

    vel += applyForces(nextPos, mass, centerMass, dist, friction);
    vel = limit(vel, 0.3);

    pos += vel * speed;
    mass = CalcMass(pos, mass);

    vel -= vel * globalFriction;

    _Boids[id.x].pos = pos;
    _Boids[id.x].velocity = vel;
    _Boids[id.x].mass = mass;

    float alpha = CalcAlpha(dist, size);

    _Properties[id.x].color = float4(hsv2rgb(CalcColor(pos, _Boids[id.x].color.rgb, timeSinceUpdate)), alpha);
    _Properties[id.x].mat = GetTransformationMatrix(pos, scale);
}

